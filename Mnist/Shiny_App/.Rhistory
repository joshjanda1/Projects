plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot")),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(HTML(
'<footer><a href = "https://github.com/joshjanda1" align = "center">Created By Josh Janda</a></footer>'
))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot")),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(HTML(
'<footer><center><a href = "https://github.com/joshjanda1">Created By Josh Janda</a></center></footer>'
))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot")),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(HTML(
'<footer><center><image src = "github.svg" href = "https://github.com/joshjanda1></image></center></footer>'
))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot")),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(HTML(
'<footer><center><image src = "github.svg" href = "https://github.com/joshjanda1 /></center></footer>'
))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot")),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(href = "https://github.com/joshjanda1",
tags$img(src = 'github.svg'))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot")),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(href = "https://github.com/joshjanda1",
tags$img(src = 'github.png'))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
ui = fluidPage(
setBackgroundColor("#A8A8A8"),
h1(id = "title", "Predicting Hand-Written Digits Using a Convolutional Neural Network"),
h4("Click on plot to start/stop drawing"),
fluidRow(
sidebarLayout(
sidebarPanel(
sliderInput("pencilwidth", "Width of the Pencil", min = 1, max = 30, step = 1, value = 5),
actionButton("resetplot", "Reset Plot"),
actionButton("predict", "Predict Number"),
textOutput("selected"),
plotOutput("probplot"),
tags$a(href = "https://github.com/joshjanda1",
tags$img(src = 'github.png'))),
mainPanel(
plotOutput("drawingboard", width = "500px", height = "500px",
hover = hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE,
nullOutside = TRUE),
click = "click")
)
),
tags$footer(tags$a(href = "https://github.com/joshjanda1",
tags$img(src = 'github.png')))
)
)
server = function(input, output, session) {
vals = reactiveValues(x = NULL, y = NULL) #x and y are changing with user input so reactive
draw = reactiveVal(FALSE) #drawing board (pixel input)
pixels = reactiveValues(fig = NULL, mtx = NULL)
predictions = reactiveValues(classes = "NA", probs = NULL)
observeEvent(input$click, handlerExpr = {
temp = draw()
draw(!temp) #on click enable draw
if (!draw()) {
vals$x = c(vals$x, NA) #if draw not true then set x and y to a vector of itself and NA to stop drawing
vals$y = c(vals$y, NA)
}
})
observeEvent(input$resetplot, handlerExpr = {
vals$x = NULL
vals$y = NULL #sets x and y to null when resetting plot to make plot blank
pixels$prediction = NULL
pixels$fig = NULL
pixels$mtx = NULL
output$probsplot = NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x = c(vals$x, input$hover$x) # if draw enabled, wherever user hovers draw that x value and combine with current drawn
vals$y = c(vals$y, input$hover$y) # if draw enabled, wherever user hovers draw that y value and combine with current drawn
}
})
observeEvent(input$predict, {
pixels$fig = make_fig(vals$x, vals$y)
pixels$mtx = get_pixels(pixels$fig)
predictions$classes = predict_pixels(pixels$mtx)
predictions$probs = pixel_probs(pixels$mtx)
output$probplot = renderPlot({
barplot(predictions$probs, main = "Neural Network Probability Outputs", horiz = TRUE,
xlab = "Probability", col = rainbow(9), names.arg = names)
})
})
output$drawingboard = renderPlot({
plot(x = vals$x, y = vals$y, xlim = c(0, 28), ylim = c(0, 28),
xlab = "x-pixels", ylab = "y-pixels", type = "l", lwd = input$pencilwidth)
})
output$selected = renderText({
paste("Predicted Value: ", predictions$classes)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(tidyverse)
library(reticulate)
library(shinyWidgets)
runApp()
